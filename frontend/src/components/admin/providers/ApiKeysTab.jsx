import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { privacyService } from '../../../services/admin';

const ApiKeysTab = ({
  apiKeys,
  loading,
  onActivate,
  onDeactivate,
  onDelete 
}) => {
  const [privacyModeEnabled, setPrivacyModeEnabled] = useState(false);

  useEffect(() => {
    const fetchPrivacySettings = async () => {
      try {
        const privacyResponse = await privacyService.getPrivacySettings();

        if (privacyResponse && privacyResponse.data && privacyResponse.data.data) {
          setPrivacyModeEnabled(privacyResponse.data.data.globalPrivacyMode);
        } else if (privacyResponse && privacyResponse.data) {
          setPrivacyModeEnabled(privacyResponse.data.globalPrivacyMode);
        }
      } catch (err) {
        console.error('Error fetching privacy settings:', err);
      }
    };

    fetchPrivacySettings();
  }, []);
  if (loading) {
    return (
      <div className="animate-pulse p-6 space-y-4">
        <div className="h-6 bg-gray-200 dark:bg-gray-700 rounded w-1/4 mb-4"></div>
        <div className="h-10 bg-gray-200 dark:bg-gray-700 rounded"></div>
        <div className="h-10 bg-gray-200 dark:bg-gray-700 rounded"></div>
      </div>
    );
  }

  if (!apiKeys || !Array.isArray(apiKeys) || apiKeys.length === 0) {
    return (
      <div className="px-6 py-8 text-center text-gray-500 dark:text-gray-400">
        <svg className="mx-auto h-12 w-12 text-gray-400 dark:text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
        </svg>
        <h3 className="mt-2 text-sm font-medium text-gray-900 dark:text-dark-text-primary">No API keys configured</h3>
        <p className="mt-1 text-sm text-gray-500 dark:text-gray-400">
          No user has external API provider keys stored.
        </p>
      </div>
    );
  }

  return (
    <div className="bg-white dark:bg-dark-primary shadow overflow-hidden sm:rounded-lg">
      <div className="px-4 py-5 sm:px-6 flex justify-between">
        <div>
          <h3 className="text-lg leading-6 font-medium text-gray-900 dark:text-dark-text-primary">User API Keys</h3>
          <p className="mt-1 max-w-2xl text-sm text-gray-500 dark:text-gray-400">
            API keys generated by users for external providers and the Scalytics API.
          </p>
        </div>
      </div>

      {/* Privacy mode alert */}
      {privacyModeEnabled && (
        <div className="mx-4 mb-4 p-4 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg text-blue-700 dark:text-dark-text-primary">
          <div className="flex items-start">
            <div className="flex-shrink-0">
              {/* Added dark variant for icon color */}
              <svg className="h-5 w-5 text-blue-400 dark:text-dark-link" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
              </svg>
            </div>
            <div className="ml-3">
              <h3 className="text-sm font-medium text-blue-800 dark:text-dark-text-primary">Privacy Mode Active</h3>
              <div className="mt-2 text-sm text-blue-700 dark:text-dark-text-primary">
                <p>Global Privacy Mode is currently enabled for the entire system.</p>
                <p className="mt-1">External API keys cannot be activated until Privacy Mode is disabled in the Admin â†’ Privacy settings.</p>
              </div>
            </div>
          </div>
        </div>
      )}

      <div className="overflow-x-auto border border-gray-200 dark:border-dark-border rounded-lg">
        <table className="min-w-full divide-y divide-gray-200 dark:divide-dark-border">
          <thead className="bg-gray-50 dark:bg-dark-secondary">
            <tr>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                Provider
              </th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                Key Name
              </th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                User
              </th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                Storage
              </th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                Status
              </th>
              <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                Actions
              </th>
            </tr>
          </thead>
          <tbody className="bg-white dark:bg-dark-primary divide-y divide-gray-200 dark:divide-dark-border">
            {apiKeys && Array.isArray(apiKeys) && apiKeys.map((key) => {
              const isScalyticsKey = key.provider_name === 'Scalytics API';
              return (
              <tr key={key.id} className="hover:bg-gray-50 dark:hover:bg-dark-secondary">
                {/* Provider */}
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className={`text-sm font-medium ${isScalyticsKey ? 'text-indigo-600 dark:text-indigo-400' : 'text-gray-900 dark:text-dark-text-primary'}`}>{key.provider_name}</div>
                </td>
                {/* Key Name */}
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm font-medium text-gray-900 dark:text-dark-text-primary">{key.key_name || 'Unnamed Key'}</div>
                </td>
                {/* User */}
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm font-medium text-gray-900 dark:text-dark-text-primary flex items-center">
                    {key.user_username || 'Unknown User'}
                    {/* <span className="ml-2 px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-300">
                      Owner
                    </span> */}
                  </div>
                  <div className="text-xs text-gray-500 dark:text-gray-400">{key.user_email || 'No email'}</div>
                </td>
                 {/* Storage Type */}
                 <td className="px-6 py-4 whitespace-nowrap">
                   <div className="text-xs text-gray-500 dark:text-gray-400">
                     {isScalyticsKey ? 'Hashed' : (key.is_encrypted ? 'Encrypted' : 'Plaintext')}
                   </div>
                 </td>
                {/* Status */}
                <td className="px-6 py-4 whitespace-nowrap">
                  {/* Scalytics keys always show 'Active' as their DB status is always 1. Actual usability depends on global toggle. */}
                  <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                      (isScalyticsKey || key.is_active)
                      ? 'bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-300'
                      : 'bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-300'
                    }`}>
                    {isScalyticsKey || key.is_active ? 'Active' : 'Inactive'}
                  </span>
                </td>
                {/* Actions */}
                <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium space-x-2">
                  {/* Activate/Deactivate only for External Keys */}
                  {!isScalyticsKey && key.is_active && (
                    <button
                      onClick={() => onDeactivate(key.id)}
                      className="inline-flex items-center px-3 py-1 border border-transparent text-xs leading-4 font-medium rounded-md text-white bg-yellow-600 hover:bg-yellow-700 dark:bg-yellow-700 dark:hover:bg-yellow-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500 dark:focus:ring-offset-gray-800"
                      title="Deactivate External Key"
                    >
                      {/* Deactivate Icon */}
                       <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
                    </button>
                  )}
                   {!isScalyticsKey && !key.is_active && (
                     <button
                       onClick={privacyModeEnabled ? undefined : () => onActivate(key.id)}
                       className={`inline-flex items-center px-3 py-1 border border-transparent text-xs leading-4 font-medium rounded-md text-white ${privacyModeEnabled ? 'bg-gray-400 cursor-not-allowed' : 'bg-green-600 hover:bg-green-700 dark:bg-green-700 dark:hover:bg-green-800 focus:ring-green-500'} focus:outline-none focus:ring-2 focus:ring-offset-2 dark:focus:ring-offset-gray-800`}
                       title={privacyModeEnabled ? "Cannot activate external API keys while Privacy Mode is enabled" : "Activate External Key"}
                       disabled={privacyModeEnabled}
                     >
                       {/* Activate Icon */}
                       <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
                     </button>
                   )}
                   {/* Delete Button (Always available) */}
                   <button
                     onClick={() => onDelete(key.id)} // Use onDelete prop
                     className="inline-flex items-center px-3 py-1 border border-transparent text-xs leading-4 font-medium rounded-md text-white bg-red-600 hover:bg-red-700 dark:bg-red-700 dark:hover:bg-red-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 dark:focus:ring-offset-gray-800"
                     title="Delete Key"
                   >
                     {/* Delete Icon */}
                     <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" /></svg>
                   </button>
                </td>
              </tr>
              );
            })}
          </tbody>
        </table>
      </div>
    </div>
  );
};

ApiKeysTab.propTypes = {
  apiKeys: PropTypes.array.isRequired,
  loading: PropTypes.bool.isRequired,
  onActivate: PropTypes.func.isRequired,
  onDeactivate: PropTypes.func.isRequired,
  onDelete: PropTypes.func.isRequired // Add prop type for onDelete
};

export default ApiKeysTab;
